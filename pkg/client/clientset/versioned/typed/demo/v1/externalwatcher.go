/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/bwarminski/brett-custom-resource/pkg/apis/demo/v1"
	scheme "github.com/bwarminski/brett-custom-resource/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ExternalWatchersGetter has a method to return a ExternalWatcherInterface.
// A group's client should implement this interface.
type ExternalWatchersGetter interface {
	ExternalWatchers(namespace string) ExternalWatcherInterface
}

// ExternalWatcherInterface has methods to work with ExternalWatcher resources.
type ExternalWatcherInterface interface {
	Create(*v1.ExternalWatcher) (*v1.ExternalWatcher, error)
	Update(*v1.ExternalWatcher) (*v1.ExternalWatcher, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.ExternalWatcher, error)
	List(opts metav1.ListOptions) (*v1.ExternalWatcherList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ExternalWatcher, err error)
	ExternalWatcherExpansion
}

// externalWatchers implements ExternalWatcherInterface
type externalWatchers struct {
	client rest.Interface
	ns     string
}

// newExternalWatchers returns a ExternalWatchers
func newExternalWatchers(c *BwarminskiV1Client, namespace string) *externalWatchers {
	return &externalWatchers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the externalWatcher, and returns the corresponding externalWatcher object, and an error if there is any.
func (c *externalWatchers) Get(name string, options metav1.GetOptions) (result *v1.ExternalWatcher, err error) {
	result = &v1.ExternalWatcher{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("externalwatchers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ExternalWatchers that match those selectors.
func (c *externalWatchers) List(opts metav1.ListOptions) (result *v1.ExternalWatcherList, err error) {
	result = &v1.ExternalWatcherList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("externalwatchers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested externalWatchers.
func (c *externalWatchers) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("externalwatchers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a externalWatcher and creates it.  Returns the server's representation of the externalWatcher, and an error, if there is any.
func (c *externalWatchers) Create(externalWatcher *v1.ExternalWatcher) (result *v1.ExternalWatcher, err error) {
	result = &v1.ExternalWatcher{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("externalwatchers").
		Body(externalWatcher).
		Do().
		Into(result)
	return
}

// Update takes the representation of a externalWatcher and updates it. Returns the server's representation of the externalWatcher, and an error, if there is any.
func (c *externalWatchers) Update(externalWatcher *v1.ExternalWatcher) (result *v1.ExternalWatcher, err error) {
	result = &v1.ExternalWatcher{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("externalwatchers").
		Name(externalWatcher.Name).
		Body(externalWatcher).
		Do().
		Into(result)
	return
}

// Delete takes name of the externalWatcher and deletes it. Returns an error if one occurs.
func (c *externalWatchers) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("externalwatchers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *externalWatchers) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("externalwatchers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched externalWatcher.
func (c *externalWatchers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.ExternalWatcher, err error) {
	result = &v1.ExternalWatcher{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("externalwatchers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
