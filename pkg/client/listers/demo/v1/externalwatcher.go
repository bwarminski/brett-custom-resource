/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/bwarminski/brett-custom-resource/pkg/apis/demo/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalWatcherLister helps list ExternalWatchers.
type ExternalWatcherLister interface {
	// List lists all ExternalWatchers in the indexer.
	List(selector labels.Selector) (ret []*v1.ExternalWatcher, err error)
	// ExternalWatchers returns an object that can list and get ExternalWatchers.
	ExternalWatchers(namespace string) ExternalWatcherNamespaceLister
	ExternalWatcherListerExpansion
}

// externalWatcherLister implements the ExternalWatcherLister interface.
type externalWatcherLister struct {
	indexer cache.Indexer
}

// NewExternalWatcherLister returns a new ExternalWatcherLister.
func NewExternalWatcherLister(indexer cache.Indexer) ExternalWatcherLister {
	return &externalWatcherLister{indexer: indexer}
}

// List lists all ExternalWatchers in the indexer.
func (s *externalWatcherLister) List(selector labels.Selector) (ret []*v1.ExternalWatcher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalWatcher))
	})
	return ret, err
}

// ExternalWatchers returns an object that can list and get ExternalWatchers.
func (s *externalWatcherLister) ExternalWatchers(namespace string) ExternalWatcherNamespaceLister {
	return externalWatcherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalWatcherNamespaceLister helps list and get ExternalWatchers.
type ExternalWatcherNamespaceLister interface {
	// List lists all ExternalWatchers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ExternalWatcher, err error)
	// Get retrieves the ExternalWatcher from the indexer for a given namespace and name.
	Get(name string) (*v1.ExternalWatcher, error)
	ExternalWatcherNamespaceListerExpansion
}

// externalWatcherNamespaceLister implements the ExternalWatcherNamespaceLister
// interface.
type externalWatcherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalWatchers in the indexer for a given namespace.
func (s externalWatcherNamespaceLister) List(selector labels.Selector) (ret []*v1.ExternalWatcher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExternalWatcher))
	})
	return ret, err
}

// Get retrieves the ExternalWatcher from the indexer for a given namespace and name.
func (s externalWatcherNamespaceLister) Get(name string) (*v1.ExternalWatcher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("externalwatcher"), name)
	}
	return obj.(*v1.ExternalWatcher), nil
}
