/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/bwarminski/brett-custom-resource/deployment/pkg/apis/brettdeployment/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BrettDeploymentLister helps list BrettDeployments.
type BrettDeploymentLister interface {
	// List lists all BrettDeployments in the indexer.
	List(selector labels.Selector) (ret []*v1.BrettDeployment, err error)
	// BrettDeployments returns an object that can list and get BrettDeployments.
	BrettDeployments(namespace string) BrettDeploymentNamespaceLister
	BrettDeploymentListerExpansion
}

// brettDeploymentLister implements the BrettDeploymentLister interface.
type brettDeploymentLister struct {
	indexer cache.Indexer
}

// NewBrettDeploymentLister returns a new BrettDeploymentLister.
func NewBrettDeploymentLister(indexer cache.Indexer) BrettDeploymentLister {
	return &brettDeploymentLister{indexer: indexer}
}

// List lists all BrettDeployments in the indexer.
func (s *brettDeploymentLister) List(selector labels.Selector) (ret []*v1.BrettDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BrettDeployment))
	})
	return ret, err
}

// BrettDeployments returns an object that can list and get BrettDeployments.
func (s *brettDeploymentLister) BrettDeployments(namespace string) BrettDeploymentNamespaceLister {
	return brettDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BrettDeploymentNamespaceLister helps list and get BrettDeployments.
type BrettDeploymentNamespaceLister interface {
	// List lists all BrettDeployments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.BrettDeployment, err error)
	// Get retrieves the BrettDeployment from the indexer for a given namespace and name.
	Get(name string) (*v1.BrettDeployment, error)
	BrettDeploymentNamespaceListerExpansion
}

// brettDeploymentNamespaceLister implements the BrettDeploymentNamespaceLister
// interface.
type brettDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BrettDeployments in the indexer for a given namespace.
func (s brettDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1.BrettDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BrettDeployment))
	})
	return ret, err
}

// Get retrieves the BrettDeployment from the indexer for a given namespace and name.
func (s brettDeploymentNamespaceLister) Get(name string) (*v1.BrettDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("brettdeployment"), name)
	}
	return obj.(*v1.BrettDeployment), nil
}
